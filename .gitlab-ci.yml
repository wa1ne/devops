image: shp4devops/devops_ci:latest

stages:
  - pre_build
  - test
  - build
  - release


mypy-test:
    stage: test
    tags:
        - devops
    script:
        - mypy send_request_and_check_response.py


unit-test:
    stage: test
    tags:
        - devops
    script:
        - pip install -e .
        - pytest -v tests/image.py


.build_config:
    stage: build
    tags:
        - devops
    image:
        name: gcr.io/kaniko-project/executor:v1.23.2-debug
        entrypoint: [ "" ]
    before_script:
        - echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$(echo -n ${DOCKER_LOGIN_DEVOPS}:${DOCKER_PASSWORD_DEVOPS} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - export TAG="$(date +%d_%m_%Y_%H_%M)"


build-and-publish-requirements:
    extends: .build_config
    stage: pre_build
    variables:
        REPO: "$DOCKER_LOGIN_DEVOPS/devops_requirements"
    script:
    - >
        /kaniko/executor 
        --context "${CI_PROJECT_DIR}" 
        --dockerfile "${CI_PROJECT_DIR}/docker/requirements.dockerfile"
        --destination "${REPO}:${TAG}"
        --destination "${REPO}:latest"
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /.*requirements\n$/
        - if: $CI_COMMIT_MESSAGE =~ /.*all\n$/


build-and-publish-ci_image:
    extends: .build_config
    stage: pre_build
    variables:
        REPO: "$DOCKER_LOGIN_DEVOPS/devops_ci"
    needs:
        - build-and-publish-requirements
    script:
    - >
        /kaniko/executor 
        --context "${CI_PROJECT_DIR}" 
        --dockerfile "${CI_PROJECT_DIR}/docker/ci_executor.dockerfile"
        --destination "${REPO}:${TAG}"
        --destination "${REPO}:latest"
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /.*ci_image\n$/
          when: on_success
        - if: $CI_COMMIT_MESSAGE =~ /.*all\n$/


build-and-publish-server:
    extends: .build_config
    stage: build
    variables:
        REPO: "$DOCKER_LOGIN_DEVOPS/devops_server"
    script:
    - >
        /kaniko/executor 
        --context "${CI_PROJECT_DIR}" 
        --dockerfile "${CI_PROJECT_DIR}/docker/server.dockerfile"
        --destination "${REPO}:${TAG}"
        --destination "${REPO}:latest"
    rules:
        - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /.*release\n$/
          when: on_success
        - if: $CI_COMMIT_MESSAGE =~ /.*preprod\n$/
          when: on_success
        - if: $CI_COMMIT_MESSAGE =~ /.*all\n$/


release-to-preprod:
    stage: release
    tags:
        - devops
    script:
        - mkdir ~/.ssh
        - echo "$MASTER_SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
        - chmod go-rwx ~/.ssh/id_rsa
        - ssh -o StrictHostKeyChecking=no $MASTER_SSH_USER@$MASTER_SSH_HOST -t "cd devops_pro/server && git stash && git pull && kubectl apply -f infra/preprod/deployment.yaml && kubectl rollout restart deployment/devops-server-preprod"
    rules:
        - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /.*release\n$/
          when: on_success
        - if: $CI_COMMIT_MESSAGE =~ /.*preprod\n$/
          when: on_success
        - if: $CI_COMMIT_MESSAGE =~ /.*all\n$/

release-to-prod:
    stage: release
    tags:
        - devops
    script:
        - mkdir ~/.ssh
        - echo "$MASTER_SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/id_rsa
        - chmod go-rwx ~/.ssh/id_rsa
        - ssh -o StrictHostKeyChecking=no $MASTER_SSH_USER@$MASTER_SSH_HOST -t "cd devops_pro/server && git stash && git pull && kubectl apply -f infra/prod/deployment.yaml && kubectl rollout restart deployment/devops-server-prod"
    needs:
        - release-to-preprod
    rules:
        - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /.*release\n$/
          when: manual
        - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /.*all\n$/
          when: manual
